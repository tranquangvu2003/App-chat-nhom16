Index: src/firebase/firebase.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport \"firebase/storage\";\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"@firebase/firestore\";\r\nimport { getStorage } from \"firebase/storage\";\r\nimport { getAuth } from \"firebase/auth\";\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyA4gm66GFRsjmANQrukL79wb0lAX85Eayg\",\r\n  authDomain: \"uploadingfile-752c1.firebaseapp.com\",\r\n  projectId: \"uploadingfile-752c1\",\r\n  storageBucket: \"uploadingfile-752c1.appspot.com\",\r\n  messagingSenderId: \"66547194848\",\r\n  appId: \"1:66547194848:web:b65e46ef7710069769e985\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app);\r\nexport const db = getFirestore(app);\r\nexport const storage = getStorage(app); \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/firebase/firebase.js b/src/firebase/firebase.js
--- a/src/firebase/firebase.js	
+++ b/src/firebase/firebase.js	
@@ -1,9 +1,8 @@
-
-import "firebase/storage";
 import { initializeApp } from "firebase/app";
-import { getFirestore } from "@firebase/firestore";
-import { getStorage } from "firebase/storage";
 import { getAuth } from "firebase/auth";
+import { getFirestore } from "firebase/firestore";
+import { getStorage,ref, uploadBytes, getDownloadURL } from "firebase/storage";
+
 const firebaseConfig = {
   apiKey: "AIzaSyA4gm66GFRsjmANQrukL79wb0lAX85Eayg",
   authDomain: "uploadingfile-752c1.firebaseapp.com",
@@ -14,6 +13,6 @@
 };
 
 const app = initializeApp(firebaseConfig);
-export const auth = getAuth(app);
-export const db = getFirestore(app);
-export const storage = getStorage(app); 
+export const auth = getAuth()
+export const db = getFirestore()
+export const storage = getStorage()
Index: src/components/Chat/Chat.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./Chat.scss\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Picker, {SkinTones} from 'emoji-picker-react';\r\nimport { storage } from \"../../firebase/firebase\";\r\n\r\n\r\nconst Chat = () => {\r\n    // console.log(\"updataadaaf\")\r\n    const location = useLocation();\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const nameParam = queryParams.get(\"person\");\r\n    const typeParam = queryParams.get(\"type\")\r\n    const [messages, setMessages] = useState([]);\r\n    const [ws, setWs] = useState(null);\r\n    const [ msg, setMsg] = useState(\"\");\r\n    const tbodyRef = useRef(null); // Tham chiếu cho tbody\r\n    const currentUserString = localStorage.getItem(\"currentUser\");\r\n    const currentUser = JSON.parse(currentUserString);\r\n    const [person, setPerson] = useState(nameParam);\r\n    const [type, setType] = useState(typeParam);\r\n    const [loading, setLoading] = useState(false); // Trạng thái loading\r\n    const [own,setOwn] = useState(\"\")\r\n    const [listMember,setListMember] = useState([])\r\n    const [showPicker, setShowPicker] = useState(false);\r\n    const [image, setImage] = useState(null);\r\n    const [preview, setPreview] = useState(null);\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        const emoji = event?.emoji;\r\n        if (emoji) {\r\n            setMsg(prevMsg => prevMsg + emoji);\r\n        }\r\n        setShowPicker(false); // Ẩn picker emoji sau khi chọn\r\n    };\r\n\r\n\r\n    //update chat\r\n    // console.log('type',type)\r\n    useEffect(() => {\r\n        const queryParams = new URLSearchParams(location.search);\r\n        const nameParam = queryParams.get(\"person\");\r\n        const typeParam = queryParams.get(\"type\");\r\n        setPerson(nameParam);\r\n        setType(typeParam);\r\n        setMessages([]);\r\n        setLoading(true);\r\n\r\n        // Cập nhật lại tin nhắn khi person thay đổi\r\n        if (ws && nameParam && ws.readyState === WebSocket.OPEN) {\r\n            console.log('skjfsdf',location.search)\r\n            console.log('namePra',nameParam)\r\n            console.log('TypePR',typeParam)\r\n            console.log('queryParams',queryParams)\r\n            console.log('setType',setType(typeParam));\r\n\r\n            if(typeParam === \"0\"){\r\n                setType(typeParam)\r\n                const getPeopleChatMes = {\r\n                    action: \"onchat\",\r\n                    data: {\r\n                        event: \"GET_PEOPLE_CHAT_MES\",\r\n                        data: {\r\n                            name: nameParam,\r\n                            page: 1,\r\n                        },\r\n                    },\r\n                };\r\n                const JsonGetPeopleChatMes = JSON.stringify(getPeopleChatMes);\r\n                console.log(\"Chuỗi JSON getPeopleChatMes:\", JsonGetPeopleChatMes);\r\n                ws.send(JsonGetPeopleChatMes);\r\n            } else if(typeParam === \"1\"){\r\n                setType(typeParam)\r\n                const getRoomChatMes = {\r\n                    action: \"onchat\",\r\n                    data: {\r\n                        event: \"GET_ROOM_CHAT_MES\",\r\n                        data: {\r\n                            name: nameParam,\r\n                            page: 1,\r\n                        },\r\n                    },\r\n                };\r\n                const JsoGetRoomChatMes = JSON.stringify(getRoomChatMes);\r\n                // console.log(\"Chuỗi JSON getRoomChatMes:\", JsoGetRoomChatMes);\r\n                ws.send(JsoGetRoomChatMes);\r\n            }else {\r\n                console.log(\"err,type\")\r\n            }\r\n        }\r\n    }, [location.search, ws]);\r\n\r\n\r\n    useEffect(() => {\r\n        const webSocket = new WebSocket(\"ws://140.238.54.136:8080/chat/chat\");\r\n        setWs(webSocket);\r\n        // console.log(\"websocket thay đổi\")\r\n        webSocket.onopen = () => {\r\n            // console.log(\"WebSocket connected\");\r\n            const loginData = {\r\n                action: \"onchat\",\r\n                data: {\r\n                    event: \"LOGIN\",\r\n                    data: {\r\n                        user: currentUser.username,\r\n                        pass: currentUser.password,\r\n                    },\r\n                },\r\n            };\r\n            const JsonLogin = JSON.stringify(loginData);\r\n            // console.log(\"Chuỗi JSON LOGIN:\", JsonLogin);\r\n            webSocket.send(JsonLogin);\r\n        };\r\n\r\n        webSocket.onmessage = (event) => {\r\n            if(document.getElementById('tdMess1')){\r\n                document.getElementById('tdMess1').remove();\r\n            }\r\n            const message = JSON.parse(event.data);\r\n            console.log(\"Received message:\", message);\r\n            if (message.event === \"LOGIN\") {\r\n                if (message.status === \"success\") {\r\n                    if(type === '0'){\r\n                        console.log(\"perrrsssonn\",person)\r\n                        // Sau khi đăng nhập thành công, gửi tin nhắn tới person hiện tại\r\n                        const getPeopleChatMes = {\r\n                            action: \"onchat\",\r\n                            data: {\r\n                                event: \"GET_PEOPLE_CHAT_MES\",\r\n                                data: {\r\n                                    name: person,\r\n                                    page: 1,\r\n                                },\r\n                            },\r\n                        };\r\n                        const JsonGetPeopleChatMes = JSON.stringify(getPeopleChatMes);\r\n                        console.log(\"Chuỗi JSON getPeopleChatMes:\", JsonGetPeopleChatMes);\r\n                        webSocket.send(JsonGetPeopleChatMes);\r\n                    }else if(type === '1'){\r\n                        console.log(\"perrrsssonn\",person)\r\n                        // Sau khi đăng nhập thành công, gửi tin nhắn tới person hiện tại\r\n                        const getPeopleChatMes = {\r\n                            action: \"onchat\",\r\n                            data: {\r\n                                event: \"GET_ROOM_CHAT_MES\",\r\n                                data: {\r\n                                    name: person,\r\n                                    page: 1,\r\n                                },\r\n                            },\r\n                        };\r\n                        const JsonGetPeopleChatMes = JSON.stringify(getPeopleChatMes);\r\n                        // console.log(\"Chuỗi JSON getPeopleChatMes:\", JsonGetPeopleChatMes);\r\n                        webSocket.send(JsonGetPeopleChatMes);\r\n                    }\r\n                } else {\r\n                    alert(\r\n                        \"Đăng nhập thất bại! Vui lòng kiểm tra lại thông tin đăng nhập.\"\r\n                    );\r\n                    // webSocket.close();\r\n                }\r\n            } else if (message.event === \"GET_PEOPLE_CHAT_MES\") {\r\n                if(document.getElementById('tdMess2')){\r\n                    document.getElementById('tdMess2').remove();\r\n                }\r\n                setMessages(message.data.reverse());\r\n                setLoading(false); // Kết thúc trạng thái loading\r\n                // console.log(\"Danh sách tin nhắn chat của người dùng:\", message.data);\r\n            } else if (message.event === \"SEND_CHAT\") {\r\n                const newRow = document.createElement(\"tr\");\r\n                newRow.style.height = \"50px\";\r\n                const currentTime = new Date().toISOString().slice(0, 19).replace(\"T\", \" \");\r\n                newRow.innerHTML = `\r\n              <td id=\"tdMess1\" style=\"color: blue; width: 200px; border-radius: 10px; box-shadow: inset 0 0 10px rgba(0,0,0,0.5); background-color: #f2f2f2; padding: 20px;\">\r\n                ${message.data.mes}\r\n                <br/>\r\n                <p className=\"detailMes\" style=\"font-size: 10px; color: black;\">\r\n                  ${currentTime}\r\n                </p>\r\n              </td>\r\n              <td class=\"tdMess\">&nbsp;</td>\r\n            `;\r\n\r\n                // console.log(message.data.to);\r\n                // console.log();\r\n                if(message.data.to == currentUser.username){\r\n                    tbodyRef.current.append(newRow);\r\n                    tbodyRef.current.scrollTop = tbodyRef.current.scrollHeight;\r\n                }\r\n\r\n                // Xử lý khi nhận được tin nhắn đã gửi thành công\r\n                // console.log(\"Tin nhắn đã gửi thành công:\", message);\r\n                // Cập nhật danh sách tin nhắn nếu cần\r\n            }else if (message.event === \"GET_ROOM_CHAT_MES\") {\r\n                if(document.getElementById('tdMess2')){\r\n                    document.getElementById('tdMess2').remove();\r\n                }\r\n                if (typeof message.data === 'undefined' || typeof message.data.chatData === 'undefined') {\r\n                    // console.log('message.data or message.data.chatData is undefined');\r\n                    setMessages([]);\r\n                } else {\r\n                    setOwn(message.data.own);\r\n                    setListMember(message.data.userList)\r\n                    setMessages(message.data.chatData.reverse());\r\n                }\r\n                setLoading(false);\r\n            }else if(message.event === \"AUTH\" && message.mes === 'User not Login'){\r\n                const loginData = {\r\n                    action: \"onchat\",\r\n                    data: {\r\n                        event: \"LOGIN\",\r\n                        data: {\r\n                            user: currentUser.username,\r\n                            pass: currentUser.password,\r\n                        },\r\n                    },\r\n                };\r\n                const JsonLogin = JSON.stringify(loginData);\r\n                // console.log(\"Chuỗi JSON LOGIN:\", JsonLogin);\r\n                webSocket.send(JsonLogin);\r\n            }\r\n        };\r\n\r\n        webSocket.onerror = (error) => {\r\n            // console.error(\"WebSocket error:\", error);\r\n            alert(\"Lỗi kết nối WebSocket!\");\r\n        };\r\n\r\n        webSocket.onclose = () => {\r\n            console.log(\"WebSocket connection closed on chat.js\");\r\n        };\r\n\r\n        return () => {\r\n            if (ws) {\r\n                // ws.close();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Cuộn xuống cuối cùng của tbody khi messages thay đổi\r\n        if (tbodyRef.current) {\r\n            tbodyRef.current.scrollTop = tbodyRef.current.scrollHeight;\r\n        }\r\n    }, [messages]);\r\n\r\n    const handleDeleteMessage = (index) => {\r\n        setMessages((prevMessages) => prevMessages.filter((_, i) => i !== index));\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n          setImage(file);\r\n          const reader = new FileReader();\r\n          reader.onloadend = () => {\r\n            setPreview(reader.result);\r\n          };\r\n          reader.readAsDataURL(file);\r\n        }\r\n      };\r\n    \r\n      \r\n      \r\n      \r\n    \r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (image) {\r\n            handleUpload();\r\n        } else {\r\n            sendMessage();\r\n        }\r\n    };\r\n    const handleUpload = async () => {\r\n        if (image) {\r\n          const storageRef = storage.ref(); // Ensure storage is properly initialized\r\n          const fileRef = storageRef.child(image.name); // Create a reference to the image file\r\n      \r\n          try {\r\n            // Upload the image file to Firebase Storage\r\n            const snapshot = await fileRef.put(image);\r\n      \r\n            // Get the download URL for the image\r\n            const imageUrl = await snapshot.ref.getDownloadURL();\r\n      \r\n            // Call sendMessage with imageUrl after successful upload\r\n            sendMessage(imageUrl);\r\n      \r\n            // Clear image and preview states after upload\r\n            setImage(null);\r\n            setPreview(null);\r\n          } catch (error) {\r\n            console.error(\"Error uploading image:\", error);\r\n            // Handle error as needed\r\n          }\r\n        }\r\n      };\r\n      const handleImageChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            setImage(file);\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                setPreview(reader.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    };\r\n    \r\n    const handleImageClick = () => {\r\n        document.getElementById(\"imageInput\").click();\r\n    };\r\n     const sendMessage = (imageUrl = null) => {\r\n  if (type === '0') {\r\n    if (ws && ws.readyState === WebSocket.OPEN) {\r\n      const sendChatData = {\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"SEND_CHAT\",\r\n          data: {\r\n            type: \"people\",\r\n            to: person,\r\n            mes: msg,\r\n            image: imageUrl,\r\n          },\r\n        },\r\n      };\r\n      const JsonSendChat = JSON.stringify(sendChatData);\r\n      ws.send(JsonSendChat);\r\n\r\n      const newRow = document.createElement(\"tr\");\r\n      const currentTime = new Date().toISOString().slice(0, 19).replace(\"T\", \" \");\r\n      newRow.style.height = \"50px\";\r\n      newRow.innerHTML = `\r\n        <td class=\"tdMess\">&nbsp;</td>\r\n        <td id=\"tdMess2\" style=\"width: 200px; border-radius: 10px; box-shadow: rgba(0, 0, 0, 0.5) 0px 0px 10px inset; background-color: rgb(242, 242, 242); padding: 20px; text-align: right; color: red;\">\r\n          ${msg}\r\n          ${imageUrl ? `<br/><img src=\"${imageUrl}\" alt=\"Sent Image\" style=\"max-width: 100px;\" />` : ''}\r\n          <br/>\r\n          <p className=\"detailMes\" style=\"font-size: 10px; color: black;\">\r\n            ${currentTime}\r\n          </p>\r\n        </td>\r\n      `;\r\n\r\n      tbodyRef.current.append(newRow);\r\n      tbodyRef.current.scrollTop = tbodyRef.current.scrollHeight;\r\n\r\n      setMsg(\"\");\r\n      setImage(null);\r\n      setPreview(null);\r\n    } else {\r\n      console.error(\"WebSocket is not connected.\");\r\n    }\r\n  } else if (type === '1') {\r\n    if (ws && ws.readyState === WebSocket.OPEN) {\r\n      const sendChatData = {\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"SEND_CHAT\",\r\n          data: {\r\n            type: \"room\",\r\n            to: person,\r\n            mes: msg,\r\n            image: imageUrl,\r\n          },\r\n        },\r\n      };\r\n      const JsonSendChat = JSON.stringify(sendChatData);\r\n      ws.send(JsonSendChat);\r\n\r\n      const newRow = document.createElement(\"tr\");\r\n      const currentTime = new Date().toISOString().slice(0, 19).replace(\"T\", \" \");\r\n      newRow.style.height = \"50px\";\r\n      newRow.innerHTML = `\r\n        <td class=\"tdMess\" style=\"width: 200px\";>&nbsp;</td>\r\n        <td id=\"tdMess2\" style=\"width: 200px; border-radius: 10px; box-shadow: rgba(0, 0, 0, 0.5) 0px 0px 10px inset; background-color: rgb(242, 242, 242); padding: 20px; text-align: right; color: red;\">\r\n          ${msg}\r\n          ${imageUrl ? `<br/><img src=\"${imageUrl}\" alt=\"Sent Image\" style=\"max-width: 100px;\" />` : ''}\r\n          <br/>\r\n          <p className=\"detailMes\" style=\"font-size: 10px; color: black;\">\r\n            ${currentTime}\r\n          </p>\r\n        </td>\r\n      `;\r\n\r\n      tbodyRef.current.append(newRow);\r\n      tbodyRef.current.scrollTop = tbodyRef.current.scrollHeight;\r\n\r\n      setMsg(\"\");\r\n      setImage(null);\r\n      setPreview(null);\r\n    } else {\r\n      console.error(\"WebSocket is not connected.\");\r\n    }\r\n  }\r\n};\r\n\r\n      \r\n\r\n      \r\n    \r\n    \r\n    return (\r\n        <>\r\n            <section className=\"chat\">\r\n                <div className=\"header-chat\">\r\n                    <i className=\"icon fa fa-user-o\" aria-hidden=\"true\"></i>\r\n                    <p className=\"name\">{person}</p>\r\n                    <i\r\n                        className=\"icon clickable fa fa-ellipsis-h right\"\r\n                        aria-hidden=\"true\"\r\n                    ></i>\r\n                </div>\r\n                <table\r\n                    style={{width: \"100%\",minWidth:\"570px\",maxWidth:\"600px\",minHeight:\"533px\"}}\r\n                >\r\n                    <tbody\r\n                        id=\"tbody\"\r\n                        ref={tbodyRef}\r\n                        style={{\r\n                            overflowY: \"auto\", // Hiển thị thanh cuộn dọc khi cần thiết\r\n                            maxHeight: \"530px\", // Chiều cao tối đa của phần tử\r\n                            display: \"block\", // Thiết lập phần tử trở thành block để có thể sử dụng overflow-y\r\n                        }}\r\n                    >\r\n                    {loading ? (\r\n                        <tr>\r\n                            <td colSpan=\"2\" style={{textAlign: \"center\"}}>\r\n                                Loading...\r\n                            </td>\r\n                        </tr>\r\n                    ) : (type === \"0\" ?(\r\n                        messages.map((message, index) => (\r\n                            <tr key={index} style={{height: \"50px\"}}>\r\n                                {message.name === person ? (\r\n                                    <>\r\n                                        <td style={{\r\n                                            color: \"blue\",\r\n                                            width: \"400px\",\r\n                                            maxWidth:\"400px\",\r\n                                            wordBreak:\"break-all\",\r\n                                            borderRadius: \"10px\",\r\n                                            boxShadow: \"inset 0 0 10px rgba(0,0,0,0.5)\",\r\n                                            backgroundColor: \"#f2f2f2\",\r\n                                            padding: \"20px\", // Adjust margin as needed\r\n                                        }} className=\"you\">\r\n                                            {message.mes}\r\n                                            <>\r\n                                                <br/>\r\n\r\n                                                <p className=\"detailMes\" style={{fontSize: \"10px\", color: \"black\"}}>\r\n                                                    {message.createAt}\r\n                                                </p>\r\n                                            </>\r\n                                        </td>\r\n                                        <td style={{width: \"400px\"}} className=\"me\">\r\n                                            &nbsp;\r\n                                        </td>\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <td style={{width: \"400px\"}} className=\"you\">\r\n                                            &nbsp;\r\n                                        </td>\r\n                                        <td style={{\r\n                                            color: \"red\",\r\n                                            width: \"400px\",\r\n                                            maxWidth:\"400px\",\r\n                                            wordBreak:\"break-all\",\r\n                                            borderRadius: \"10px\",\r\n                                            boxShadow: \"inset 0 0 10px rgba(0,0,0,0.5)\",\r\n                                            backgroundColor: \"#f2f2f2\",\r\n                                            padding: \"20px\",\r\n                                            textAlign: \"right\",\r\n                                        }} className=\"me\">\r\n                                            {message.mes}\r\n                                            <br/>\r\n                                            <p className=\"detailMes\"\r\n                                               style={{fontSize: \"10px\", color: \"black\"}}>\r\n                                                {message.createAt}\r\n                                            </p>\r\n                                        </td>\r\n                                    </>\r\n                                )}\r\n                            </tr>\r\n                        ))\r\n                    ) : (\r\n                        messages.map((message, index) => (\r\n                            <tr key={index} style={{height: \"50px\"}}>\r\n                                {message.name !== currentUser.username ? (\r\n                                    <>\r\n                                        <td style={{\r\n                                            color: \"blue\",\r\n                                            width: \"400px\",\r\n                                            borderRadius: \"10px\",\r\n                                            maxWidth:\"400px\",\r\n                                            wordBreak:\"break-all\",\r\n                                            boxShadow: \"inset 0 0 10px rgba(0,0,0,0.5)\",\r\n                                            backgroundColor: \"#f2f2f2\",\r\n                                            padding: \"20px\", // Adjust margin as needed\r\n                                        }} className=\"you\">\r\n                                            {message.mes}\r\n                                                <>\r\n                                                    <br />\r\n                                                    <span className=\"detailMes\" style={{fontSize: \"10px\", color: \"black\" , whiteSpace: \"nowrap\"}}>\r\n                                                        <span className=\"detailMes\"\r\n                                                           style={{fontSize: \"10px\", color: \"black\"}}>\r\n                                                            {message.name} {\"  / \"}\r\n                                                        </span>\r\n                                                        {message.createAt}\r\n                                                    </span>\r\n                                                </>\r\n                                        </td>\r\n                                        <td style={{width: \"400px\"}} className=\"me\">\r\n                                            &nbsp;\r\n                                        </td>\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <td style={{width: \"400px\"}} className=\"you\">\r\n                                            &nbsp;\r\n                                        </td>\r\n                                        <td style={{\r\n                                            color: \"red\",\r\n                                            width: \"400px\",\r\n                                            maxWidth:\"400px\",\r\n                                            wordBreak:\"break-all\",\r\n                                            borderRadius: \"10px\",\r\n                                            boxShadow: \"inset 0 0 10px rgba(0,0,0,0.5)\",\r\n                                            backgroundColor: \"#f2f2f2\",\r\n                                            padding: \"20px\",\r\n                                            textAlign: \"right\",\r\n                                        }} className=\"me\">\r\n                                            {message.mes}\r\n                                            <br/>\r\n                                            <p className=\"detailMes\"\r\n                                               style={{fontSize: \"10px\", color: \"black\"}}>{message.createAt}\r\n                                            </p>\r\n                                        </td>\r\n                                    </>\r\n                                )}\r\n                            </tr>\r\n                        ))\r\n                    ))}\r\n                    </tbody>\r\n                </table>\r\n                <form onSubmit={handleSubmit}>\r\n                <div className=\"footer-chat\">\r\n                <i\r\n  className=\"icon fa fa-image clickable\"\r\n  style={{ fontSize: \"20pt\", cursor: \"pointer\" }}\r\n  aria-hidden=\"true\"\r\n  onClick={handleImageClick} // Đảm bảo đã thêm sự kiện onClick vào đây\r\n></i>\r\n<input\r\n  id=\"imageInput\"\r\n  type=\"file\"\r\n  style={{ display: 'none' }}\r\n  accept=\"image/*\"\r\n  onChange={handleImageChange} // Đảm bảo đã thêm sự kiện onChange vào đây\r\n/>\r\n\r\n                    {/* Nút emoji */}\r\n                    <i\r\n                        className=\"icon fa fa-smile-o clickable\"\r\n                        style={{ fontSize: \"20pt\", cursor: \"pointer\" }}\r\n                        aria-hidden=\"true\"\r\n                        onClick={() => setShowPicker(prev => !prev)}\r\n                    ></i>\r\n                    {/* Hiển thị picker emoji nếu showPicker là true */}\r\n                    {showPicker && (\r\n                        <Picker className=\"emoji-picker-container\"\r\n                         style={{\r\n                        position: 'absolute',\r\n                        width: '600px',  // Adjust this value to make it wider\r\n                        height: '400px', // Adjust this value to make it shorter\r\n                        bottom: '10px',  // Adjust this value as needed\r\n                        right: '600px',   // Adjust this value as needed\r\n                        zIndex: 1000,    // Ensure it is above other elements\r\n                        overflowY: 'scroll'\r\n                     }}\r\n                            onEmojiClick={onEmojiClick}\r\n                        />\r\n                    )}\r\n                    {/* Input tin nhắn */}\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"write-message\"\r\n                        placeholder=\"Type your message here\"\r\n                        value={msg}\r\n                        onChange={(e) => setMsg(e.target.value)}\r\n                    />\r\n                    {/* Nút gửi */}\r\n                    <button type=\"submit\">Send</button>\r\n                </div>\r\n                {preview && (\r\n  <div className=\"image-preview\">\r\n    <img src={preview} alt=\"Image Preview\" />\r\n    <button type=\"button\" onClick={() => setPreview(null)}>Remove</button>\r\n  </div>\r\n)}\r\n            </form>\r\n\r\n            </section>\r\n            {type === \"1\" ? (\r\n                <div className=\"table-container\" style={{maxHeight: '100%', overflowY: 'auto'}}>\r\n                    <table className=\"custom-table\" style={{width: '100%', borderCollapse: 'collapse'}}>\r\n                        <thead style={{position: 'sticky', top: -1, backgroundColor: '#fff', zIndex: 1}}>\r\n                        <tr>\r\n                            <th>Chủ sở hữu <p style={{color: 'red'}}>{own}</p></th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td className=\"horizontal-line\" colSpan=\"1\"></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>Thành viên</th>\r\n                        </tr>\r\n                        {listMember.map((item, index) => (\r\n                            <tr key={index}>\r\n                                <td>{index}{\": \"}{item.name}</td>\r\n                            </tr>\r\n                        ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            ) : \"\"}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chat;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Chat/Chat.js b/src/components/Chat/Chat.js
--- a/src/components/Chat/Chat.js	
+++ b/src/components/Chat/Chat.js	
@@ -3,6 +3,7 @@
 import { useLocation } from "react-router-dom";
 import Picker, {SkinTones} from 'emoji-picker-react';
 import { storage } from "../../firebase/firebase";
+import {ref, uploadBytes, getDownloadURL} from "firebase/storage"
 
 
 const Chat = () => {
@@ -274,29 +275,25 @@
     };
     const handleUpload = async () => {
         if (image) {
-          const storageRef = storage.ref(); // Ensure storage is properly initialized
-          const fileRef = storageRef.child(image.name); // Create a reference to the image file
-      
-          try {
-            // Upload the image file to Firebase Storage
-            const snapshot = await fileRef.put(image);
-      
-            // Get the download URL for the image
-            const imageUrl = await snapshot.ref.getDownloadURL();
-      
-            // Call sendMessage with imageUrl after successful upload
-            sendMessage(imageUrl);
-      
-            // Clear image and preview states after upload
-            setImage(null);
-            setPreview(null);
-          } catch (error) {
-            console.error("Error uploading image:", error);
-            // Handle error as needed
-          }
+            const storageRef = ref(storage, image.name); // Tạo tham chiếu đến tệp ảnh trong Firebase Storage
+            try {
+                // Upload ảnh lên Firebase Storage
+                const snapshot = await uploadBytes(storageRef, image);
+                // Lấy URL tải xuống của ảnh
+                const imageUrl = await getDownloadURL(snapshot.ref);
+                // Gọi sendMessage với imageUrl sau khi upload thành công
+                sendMessage(imageUrl);
+                // Xóa trạng thái ảnh và preview sau khi upload
+                setImage(null);
+                setPreview(null);
+            } catch (error) {
+                console.error("Error uploading image:", error);
+                // Xử lý lỗi nếu cần
+            }
         }
-      };
-      const handleImageChange = (e) => {
+    };
+
+    const handleImageChange = (e) => {
         const file = e.target.files[0];
         if (file) {
             setImage(file);
@@ -321,8 +318,7 @@
           data: {
             type: "people",
             to: person,
-            mes: msg,
-            image: imageUrl,
+            mes: imageUrl == null ? msg : imageUrl,
           },
         },
       };
@@ -362,8 +358,7 @@
           data: {
             type: "room",
             to: person,
-            mes: msg,
-            image: imageUrl,
+            mes: imageUrl == null ? msg : imageUrl,
           },
         },
       };
